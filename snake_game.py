{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "630151ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "import random \n",
    "  \n",
    "# Initialising Dimensions of Game \n",
    "WIDTH = 500\n",
    "HEIGHT = 500\n",
    "SPEED = 350\n",
    "SPACE_SIZE = 20\n",
    "BODY_SIZE = 2\n",
    "SNAKE = \"maroon\"\n",
    "FOOD = \"lime\"\n",
    "BACKGROUND = \"gray\"\n",
    "  \n",
    "# Class to design the snake \n",
    "class Snake: \n",
    "  \n",
    "    def __init__(self): \n",
    "        self.body_size = BODY_SIZE \n",
    "        self.coordinates = [] \n",
    "        self.squares = [] \n",
    "  \n",
    "        for i in range(0, BODY_SIZE): \n",
    "            self.coordinates.append([0, 0]) \n",
    "  \n",
    "        for x, y in self.coordinates: \n",
    "            square = canvas.create_rectangle( \n",
    "                x, y, x + SPACE_SIZE, y + SPACE_SIZE,  \n",
    "                      fill=SNAKE, tag=\"snake\") \n",
    "            self.squares.append(square) \n",
    "  \n",
    "# Class to design the food \n",
    "class Food: \n",
    "  \n",
    "    def __init__(self): \n",
    "  \n",
    "        x = random.randint(0,  \n",
    "                   (WIDTH / SPACE_SIZE)-1) * SPACE_SIZE \n",
    "        y = random.randint(0,  \n",
    "                   (HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE \n",
    "  \n",
    "        self.coordinates = [x, y] \n",
    "  \n",
    "        canvas.create_oval(x, y, x + SPACE_SIZE, y +\n",
    "                           SPACE_SIZE, fill=FOOD, tag=\"food\") \n",
    "  \n",
    "# Function to check the next move of snake \n",
    "def next_turn(snake, food): \n",
    "  \n",
    "    x, y = snake.coordinates[0] \n",
    "  \n",
    "    if direction == \"up\": \n",
    "        y -= SPACE_SIZE \n",
    "    elif direction == \"down\": \n",
    "        y += SPACE_SIZE \n",
    "    elif direction == \"left\": \n",
    "        x -= SPACE_SIZE \n",
    "    elif direction == \"right\": \n",
    "        x += SPACE_SIZE \n",
    "  \n",
    "    snake.coordinates.insert(0, (x, y)) \n",
    "  \n",
    "    square = canvas.create_rectangle( \n",
    "        x, y, x + SPACE_SIZE, \n",
    "                  y + SPACE_SIZE, fill=SNAKE) \n",
    "  \n",
    "    snake.squares.insert(0, square) \n",
    "  \n",
    "    if x == food.coordinates[0] and y == food.coordinates[1]: \n",
    "  \n",
    "        global score \n",
    "  \n",
    "        score += 1\n",
    "  \n",
    "        label.config(text=\"Points:{}\".format(score)) \n",
    "  \n",
    "        canvas.delete(\"food\") \n",
    "  \n",
    "        food = Food() \n",
    "  \n",
    "    else: \n",
    "  \n",
    "        del snake.coordinates[-1] \n",
    "  \n",
    "        canvas.delete(snake.squares[-1]) \n",
    "  \n",
    "        del snake.squares[-1] \n",
    "  \n",
    "    if check_collisions(snake): \n",
    "        game_over() \n",
    "  \n",
    "    else: \n",
    "        window.after(SPEED, next_turn, snake, food) \n",
    "  \n",
    "# Function to control direction of snake \n",
    "def change_direction(new_direction): \n",
    "  \n",
    "    global direction \n",
    "  \n",
    "    if new_direction == 'left': \n",
    "        if direction != 'right': \n",
    "            direction = new_direction \n",
    "    elif new_direction == 'right': \n",
    "        if direction != 'left': \n",
    "            direction = new_direction \n",
    "    elif new_direction == 'up': \n",
    "        if direction != 'down': \n",
    "            direction = new_direction \n",
    "    elif new_direction == 'down': \n",
    "        if direction != 'up': \n",
    "            direction = new_direction \n",
    "  \n",
    "# function to check snake's collision and position \n",
    "def check_collisions(snake): \n",
    "  \n",
    "    x, y = snake.coordinates[0] \n",
    "  \n",
    "    if x < 0 or x >= WIDTH: \n",
    "        return True\n",
    "    elif y < 0 or y >= HEIGHT: \n",
    "        return True\n",
    "  \n",
    "    for body_part in snake.coordinates[1:]: \n",
    "        if x == body_part[0] and y == body_part[1]: \n",
    "            return True\n",
    "  \n",
    "    return False\n",
    "  \n",
    "# Function to control everything \n",
    "def game_over(): \n",
    "  \n",
    "    canvas.delete(ALL) \n",
    "    canvas.create_text(canvas.winfo_width()/2,  \n",
    "                       canvas.winfo_height()/2, \n",
    "                       font=('consolas', 70),  \n",
    "                       text=\"GAME OVER\", fill=\"red\",  \n",
    "                       tag=\"gameover\") \n",
    "  \n",
    "# Giving title to the gaming window \n",
    "  \n",
    "  \n",
    "window = Tk() \n",
    "window.title(\" Snake game \") \n",
    "  \n",
    "  \n",
    "score = 0\n",
    "direction = 'down'\n",
    "  \n",
    "# Display of Points Scored in Game \n",
    "  \n",
    "label = Label(window, text=\"Points:{}\".format(score),  \n",
    "              font=('consolas', 20)) \n",
    "label.pack() \n",
    "  \n",
    "canvas = Canvas(window, bg=BACKGROUND,  \n",
    "                height=HEIGHT, width=WIDTH) \n",
    "canvas.pack() \n",
    "  \n",
    "window.update() \n",
    "  \n",
    "window_width = window.winfo_width() \n",
    "window_height = window.winfo_height() \n",
    "screen_width = window.winfo_screenwidth() \n",
    "screen_height = window.winfo_screenheight() \n",
    "  \n",
    "x = int((screen_width/2) - (window_width/2)) \n",
    "y = int((screen_height/2) - (window_height/2)) \n",
    "  \n",
    "window.geometry(f\"{window_width}x{window_height}+{x}+{y}\") \n",
    "  \n",
    "window.bind('<Left>',  \n",
    "            lambda event: change_direction('left')) \n",
    "window.bind('<Right>',  \n",
    "            lambda event: change_direction('right')) \n",
    "window.bind('<Up>',  \n",
    "            lambda event: change_direction('up')) \n",
    "window.bind('<Down>',  \n",
    "            lambda event: change_direction('down')) \n",
    "  \n",
    "snake = Snake() \n",
    "food = Food() \n",
    "  \n",
    "next_turn(snake, food) \n",
    "  \n",
    "window.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67419678",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
